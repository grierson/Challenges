* Glossary

- computer -> name of function to process Intcode
- Intcode -> list of integers separated by commas `1,0,0,3,99`
- opcode -> Index of operation to perform
  - Add (1), Multiple (2), Halt (99)

- Instruction (Own term)
  - Perform opcode on two following index values, Store value at index
  - `[1 0 0 1]` => `[opcode num1 num2 store]`
  - `[opcode (get intcode num1) (get intcode num2) (update intcode at store with result)]`

#+BEGIN_SRC clojure
{
(let [opcode (get 1 opcodes) ;; => +
      num1 (get 0 intcode)   ;; => 1
      num2 (get 0 intcode)   ;; => 1
      result (opcode num1 num2)] ;; => (+ 1 1) => 2
    (assoc intcode 1 result)) ;; => [1 2 0 1]
}
#+END_SRC

For example, if your Intcode computer encounters `1,10,20,30`,
it should read the values at positions `10` and `20`, add those values,
and then overwrite the value at position 30 with their sum.

- Once performed operation jump to next `instruction` (next four numbers in Intcode)
